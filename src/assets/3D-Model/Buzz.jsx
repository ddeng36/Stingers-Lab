/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 buzz.gltf
*/
import * as THREE from 'three'
import React,{useRef} from 'react'
import { useGLTF } from '@react-three/drei'
import { useLayoutEffect } from 'react'
import gsap from 'gsap'
import { useThree } from '@react-three/fiber'
export function Model(props) {
  const groupRef = useRef();
  const { nodes, materials } = useGLTF('/buzz1.gltf')
  const camera = useThree((state) => state.camera)
  let scene = useThree((state) => state.scene);
  useLayoutEffect(() => {
    // console.log(groupRef.current)
    //log the volume of the mesh
    // console.log(groupRef.current.children[0].geometry.boundingBox.getSize(new THREE.Vector3()).x)
    groupRef.current.rotation.x = -Math.PI / 2;
    groupRef.current.position.z = 0;
    camera.position.set(0, 30, 600);
    let t1 = gsap.timeline({
      scrollTrigger: {
        trigger: "#buzz-model",
        start: "top+=100 top",
        endTrigger: "#camera",
        end: "top top",
        scrub: true,
        // markers: true,
      },
    });
  
    t1
    .to(scene.rotation, {y: 3,})
    .to(scene.rotation, {z: 1,},"key1")
    .to(scene.rotation, {y: 0,},"key1")
    .to(scene.rotation, {y:0,z: 0},"key2")
    .to(camera.position, {x:2,z: 60},"key2")
    
    .to(camera.position, {x:0,y:300},"key3")
  }, []);
  return (
    <group {...props}  ref={groupRef} dispose={null} position={[0, 0, -35]}>
      <mesh geometry={nodes.mesh_0.geometry} material={nodes.mesh_0.material} />
    </group>
  )
}

useGLTF.preload('/buzz.gltf')
